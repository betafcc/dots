#!/usr/bin/env bash

# Inputs:
#   argv: '-v|--verbose'
#   env:
#     command 'fd'
#     command 'fzf'
#
#     command '_format'
#     command '_preview'
#
#     optional string '_fd_extra_args'
#     optional string '_fzf_extra_args'
#
#     super global 'PWD'
#     super global 'HOME'

_FROM='./'
_PREFIX='./'
_QUERY='./'
# If -v (verbose)
#     if under home, go to home and tildify path
#     else, go to root
for _ARG in "$@"; do
    case "${_ARG}" in
        -v|--verbose)
            case "$PWD" in
                ${HOME}*)
                    _FROM="${HOME}"
                    _PREFIX='~/'
                    _QUERY="${PWD//${HOME}/\~}"
                    ;;
                *)
                    _FROM="${PWD}"
                    _PREFIX='/'
                    _QUERY="${PWD}"
                    ;;
            esac
    esac
done


# _fd :: command
# _format :: command taken from env
# _fzf :: command
# _generate_command :: command
# _fd_extra_args :: string taken from env
# _fzf_extra_args :: string taken from env
# no positional args, takes all from env
main() {
    cd "${_FROM}" \
        && _fd  ${_fd_extra_args[@]} \
            | _format  \
            | _fzf ${_fzf_extra_args[@]} \
            | \
            (
                # the 'safe' way I know to spread stdin lines to positional arguments
                set --
                while IFS= read -r REPLY; do
                    set -- "$@" "${REPLY}"
                done
                _generate_command "$@"
            )
}


_fd() {
    fd \
        --hidden \
        --no-ignore \
        --exclude '.git' \
        --exclude 'node_modules' \
        "$@"
}


_fzf() {
    fzf \
        --color 'dark' \
        --height 80% \
        --layout reverse \
        --no-multi \
        --preview '_preview {}' \
        --preview-window 'right:60%' \
        --filepath-word \
        --bind 'tab:replace-query+top,shift-tab:backward-kill-word+top' \
        --expect='alt-m,alt-e,ctrl-g,esc,ctrl-m,enter' \
        --query "${_QUERY}" \
        "$@"
}


# ( exited_command, ...selected_files ) -> command_to_execute
_generate_command() {
    case "${1}" in
        'alt-m') printf 'setsid xdg-open %q </dev/null >/dev/null 2>&1' "${2/\~/${HOME}}";;
        'alt-e') printf 'pushd %q >/dev/null; "${EDITOR}" .' "${2/\~/${HOME}}";;
        'ctrl-g'|'esc') printf '';;
        'ctrl-m'|'enter') printf 'pushd %q >/dev/null' "${2/\~/${HOME}}";;
    esac
}


main
